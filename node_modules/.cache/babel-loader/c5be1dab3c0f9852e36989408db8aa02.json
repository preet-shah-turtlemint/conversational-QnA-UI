{"ast":null,"code":"import { ofType } from \"redux-observable\";\nimport { catchError, map, mergeMap } from \"rxjs/operators\";\nimport { API_CONSTANTS } from \"../../constants/api-contants\";\nimport { get } from \"../../__utils/ajax-wrapper\";\nimport { cohortSummary, cohortSummarySuccess, cohortSummaryError } from \"./reducer\";\nimport { Observable } from \"rxjs\";\nexport const CohortSummaryEpic = (action$, state$) => action$.pipe(ofType(cohortSummary.type), mergeMap(action => {\n  const {\n    pageNo,\n    limit,\n    broker\n  } = action.payload;\n  const apiurl = API_CONSTANTS.COHORT_SUMMARY + `?pageNo=${pageNo}&limit=${limit}`;\n  return new Observable(observer => {\n    get(API_CONSTANTS.CAMPAIGN, apiurl, {\n      'x-tenant': broker,\n      'x-broker': broker\n    }).pipe(map(response => {\n      if (response.status === 200) {\n        return {\n          type: cohortSummarySuccess.type,\n          payload: response.response\n        };\n      }\n    }), catchError(error => {\n      return {\n        type: cohortSummaryError.type,\n        payload: error\n      };\n    })).subscribe({\n      next: value => {\n        // handle next value if needed\n        observer.next(value);\n      },\n      error: error => {\n        // handle error if needed\n        observer.error(error);\n      },\n      complete: () => {\n        // handle completion if needed\n        observer.complete();\n      }\n    });\n  });\n}));\n_c = CohortSummaryEpic;\nvar _c;\n$RefreshReg$(_c, \"CohortSummaryEpic\");","map":{"version":3,"names":["ofType","catchError","map","mergeMap","API_CONSTANTS","get","cohortSummary","cohortSummarySuccess","cohortSummaryError","Observable","CohortSummaryEpic","action$","state$","pipe","type","action","pageNo","limit","broker","payload","apiurl","COHORT_SUMMARY","observer","CAMPAIGN","response","status","error","subscribe","next","value","complete","_c","$RefreshReg$"],"sources":["/Users/avinashpandey/Desktop/Technology Mahashay/src/views/cohort-summary/epics.tsx"],"sourcesContent":["import { Epic, ofType } from \"redux-observable\"\nimport { catchError, map, mergeMap } from \"rxjs/operators\"\nimport { API_CONSTANTS } from \"../../constants/api-contants\"\nimport { get } from \"../../__utils/ajax-wrapper\"\nimport { cohortSummary, cohortSummarySuccess, cohortSummaryError  } from \"./reducer\"\nimport { Observable, ObservableInput } from \"rxjs\"\nimport { RootState } from \"../../redux/store\"\n\n\nexport const CohortSummaryEpic: Epic<any, any, RootState> = (action$, state$) => action$.pipe(\n    ofType<any, any>(cohortSummary.type),\n    mergeMap((action): ObservableInput<any> => {\n        const { pageNo, limit, broker } = action.payload\n        const apiurl = API_CONSTANTS.COHORT_SUMMARY + `?pageNo=${pageNo}&limit=${limit}`;\n        return new Observable<any>((observer) => {\n            get(API_CONSTANTS.CAMPAIGN, apiurl, {\n                'x-tenant': broker,\n                'x-broker': broker\n            })\n                .pipe(\n                    map((response: any) => {\n                        if (response.status === 200) {\n                            return { type: cohortSummarySuccess.type, payload: response.response }\n                        }\n                    }),\n                    catchError((error) : any => {\n                        return { type: cohortSummaryError.type, payload: error };\n                    })\n                )\n                .subscribe({\n                    next: (value) => {\n                        // handle next value if needed\n                        observer.next(value);\n                    },\n                    error: (error) => {\n                        // handle error if needed\n                        observer.error(error);\n                    },\n                    complete: () => {\n                        // handle completion if needed\n                        observer.complete();\n                    },\n                });\n        });\n\n    })\n)\n"],"mappings":"AAAA,SAAeA,MAAM,QAAQ,kBAAkB;AAC/C,SAASC,UAAU,EAAEC,GAAG,EAAEC,QAAQ,QAAQ,gBAAgB;AAC1D,SAASC,aAAa,QAAQ,8BAA8B;AAC5D,SAASC,GAAG,QAAQ,4BAA4B;AAChD,SAASC,aAAa,EAAEC,oBAAoB,EAAEC,kBAAkB,QAAS,WAAW;AACpF,SAASC,UAAU,QAAyB,MAAM;AAIlD,OAAO,MAAMC,iBAA4C,GAAGA,CAACC,OAAO,EAAEC,MAAM,KAAKD,OAAO,CAACE,IAAI,CACzFb,MAAM,CAAWM,aAAa,CAACQ,IAAI,CAAC,EACpCX,QAAQ,CAAEY,MAAM,IAA2B;EACvC,MAAM;IAAEC,MAAM;IAAEC,KAAK;IAAEC;EAAO,CAAC,GAAGH,MAAM,CAACI,OAAO;EAChD,MAAMC,MAAM,GAAGhB,aAAa,CAACiB,cAAc,GAAI,WAAUL,MAAO,UAASC,KAAM,EAAC;EAChF,OAAO,IAAIR,UAAU,CAAOa,QAAQ,IAAK;IACrCjB,GAAG,CAACD,aAAa,CAACmB,QAAQ,EAAEH,MAAM,EAAE;MAChC,UAAU,EAAEF,MAAM;MAClB,UAAU,EAAEA;IAChB,CAAC,CAAC,CACGL,IAAI,CACDX,GAAG,CAAEsB,QAAa,IAAK;MACnB,IAAIA,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;QACzB,OAAO;UAAEX,IAAI,EAAEP,oBAAoB,CAACO,IAAI;UAAEK,OAAO,EAAEK,QAAQ,CAACA;QAAS,CAAC;MAC1E;IACJ,CAAC,CAAC,EACFvB,UAAU,CAAEyB,KAAK,IAAW;MACxB,OAAO;QAAEZ,IAAI,EAAEN,kBAAkB,CAACM,IAAI;QAAEK,OAAO,EAAEO;MAAM,CAAC;IAC5D,CAAC,CACL,CAAC,CACAC,SAAS,CAAC;MACPC,IAAI,EAAGC,KAAK,IAAK;QACb;QACAP,QAAQ,CAACM,IAAI,CAACC,KAAK,CAAC;MACxB,CAAC;MACDH,KAAK,EAAGA,KAAK,IAAK;QACd;QACAJ,QAAQ,CAACI,KAAK,CAACA,KAAK,CAAC;MACzB,CAAC;MACDI,QAAQ,EAAEA,CAAA,KAAM;QACZ;QACAR,QAAQ,CAACQ,QAAQ,CAAC,CAAC;MACvB;IACJ,CAAC,CAAC;EACV,CAAC,CAAC;AAEN,CAAC,CACL,CAAC;AAAAC,EAAA,GArCYrB,iBAA4C;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}