{"version":3,"file":"index.mjs","sources":["src/lib/util.js","src/lib/cssMap.js","src/lib/readFile.js","src/lib/parse.js","src/lib/postcssImportNormalize.js","src/lib/postcssNormalize.js","src/index.js"],"sourcesContent":["export const assign = (...objects) => Object.assign(...objects)\nexport const create = (...objects) => assign(Object.create(null), ...objects)\n","import { create } from './util'\nimport Module from 'module'\nimport path from 'path'\nimport { URL } from 'url'\n\n// get esm-compatible script metadata\nconst currentURL = import.meta.url\nconst currentFilename = new URL(currentURL).pathname\nconst currentDirname = path.dirname(currentFilename)\n\n// get resolved filenames for css libraries\nconst normalizeCSS = resolve('@csstools/normalize.css')\nconst normalizeOpinionatedCSS = resolve('@csstools/normalize.css/opinionated.css')\nconst sanitizeCSS = resolve('sanitize.css')\nconst sanitizeFormsCSS = resolve('sanitize.css/forms.css')\nconst sanitizePageCSS = resolve('sanitize.css/page.css')\nconst sanitizeTypographyCSS = resolve('sanitize.css/typography.css')\n\n// export a hashmap of css library filenames\nexport const parsableFilenames = create({\n\t[normalizeCSS]: true,\n\t[normalizeOpinionatedCSS]: true,\n\t[sanitizeCSS]: true,\n\t[sanitizeFormsCSS]: true,\n\t[sanitizePageCSS]: true,\n\t[sanitizeTypographyCSS]: true\n})\n\n// export a hashmap of css library filenames by id\nexport const resolvedFilenamesById = create({\n\t'normalize': [normalizeCSS],\n\t'normalize/opinionated': [normalizeOpinionatedCSS],\n\t'normalize/*': [normalizeOpinionatedCSS],\n\t'sanitize': [sanitizeCSS],\n\t'sanitize/forms': [sanitizeCSS, sanitizeFormsCSS],\n\t'sanitize/page': [sanitizeCSS, sanitizePageCSS],\n\t'sanitize/typography': [sanitizeCSS, sanitizeTypographyCSS],\n\t'sanitize/*': [sanitizeCSS, sanitizeFormsCSS, sanitizePageCSS, sanitizeTypographyCSS]\n})\n\n// get the resolved filename of a package/module\nfunction resolve (id) {\n\treturn resolve[id] = resolve[id] || Module._resolveFilename(id, {\n\t\tid: currentFilename,\n\t\tfilename: currentFilename,\n\t\tpaths: Module._nodeModulePaths(currentDirname)\n\t})\n}\n","import { create } from './util'\nimport path from 'path'\nimport fs from 'fs'\n\nconst cache = create()\n\nexport default async function readFile (filename) {\n\tfilename = path.resolve(filename)\n\n\tcache[filename] = cache[filename] || create()\n\n\treturn new Promise(\n\t\t(resolve, reject) => fs.stat(\n\t\t\tfilename,\n\t\t\t(statsError, { mtime }) => statsError\n\t\t\t\t? reject(statsError)\n\t\t\t: mtime === cache[filename].mtime\n\t\t\t\t? resolve(cache[filename].data)\n\t\t\t: fs.readFile(\n\t\t\t\tfilename,\n\t\t\t\t'utf8',\n\t\t\t\t(readFileError, data) => readFileError\n\t\t\t\t\t? reject(readFileError)\n\t\t\t\t: resolve(\n\t\t\t\t\t(cache[filename] = { data, mtime }).data\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\t)\n}\n","import { create } from './util'\nimport readFile from './readFile'\nimport postcss from 'postcss'\n\nconst cache = create(null)\n\nexport default (filename, transformer) => readFile(filename).then(\n\t// cache the parsed css root\n\tcss => (cache[css] = cache[css] || postcss.parse(css, { from: filename }))\n).then(\n\t// clone the cached root\n\troot => root.clone()\n).then(\n\t// transform the cloned root\n\tclone => Promise.resolve(\n\t\ttransformer(clone)\n\t).then(\n\t\t// resolve the cloned root\n\t\t() => clone\n\t)\n)\n","import { create } from './util'\nimport { parsableFilenames, resolvedFilenamesById } from './cssMap'\nimport parse from './parse'\nimport readFile from './readFile'\n\nexport default commentsTransformer => opts => {\n\topts = create(opts)\n\n\t// return an postcss-import configuration\n\treturn create({\n\t\tload (filename, importOptions) {\n\t\t\treturn filename in parsableFilenames\n\t\t\t\t// parse the file (the file and css are conservatively cached)\n\t\t\t\t? parse(filename, commentsTransformer).then(\n\t\t\t\t\troot => root.toResult({ to: filename, map: true }).css\n\t\t\t\t)\n\t\t\t: typeof opts.load === 'function'\n\t\t\t\t// otherwise, use the override loader\n\t\t\t\t? opts.load.call(null, filename, importOptions)\n\t\t\t// otherwise, return the (conservatively cached) contents of the file\n\t\t\t: readFile(filename)\n\t\t},\n\t\tresolve (id, basedir, importOptions) {\n\t\t\t// get the css id by removing css extensions\n\t\t\tconst cssId = id.replace(cssExtRegExp, '')\n\n\t\t\treturn cssId in resolvedFilenamesById\n\t\t\t\t// return the known resolved path for the css id\n\t\t\t\t? resolvedFilenamesById[cssId]\n\t\t\t: typeof opts.resolve === 'function'\n\t\t\t\t// otherwise, use the override resolver\n\t\t\t\t? opts.resolve.call(null, id, basedir, importOptions)\n\t\t\t// otherwise, return the id to be resolved by postcss-import\n\t\t\t: id\n\t\t}\n\t})\n}\n\nconst cssExtRegExp = /\\.css\\b/g\n","import { resolvedFilenamesById } from './cssMap'\nimport parse from './parse'\n\nconst postcssPlugin = (commentsTransformer, opts) => root => {\n\tconst promises = []\n\tconst insertedFilenames = {}\n\n\t// use @import insertion point\n\troot.walkAtRules(\n\t\timportRegExp,\n\t\tatrule => {\n\t\t\t// get name as a fallback value for the library (e.g. @import-normalize is like @import \"normalize.css\")\n\t\t\tconst name = atrule.name.match(importRegExp)[1]\n\n\t\t\t// get url from \"library\", 'library', url(\"library\"), url('library'), or the fallback value\n\t\t\tconst url = (atrule.params.match(paramsRegExp) || []).slice(1).find(part => part) || name\n\n\t\t\tif (url) {\n\t\t\t\t// get the css id by removing css extensions\n\t\t\t\tconst cssId = url.replace(cssExtRegExp, '')\n\n\t\t\t\tif (cssId in resolvedFilenamesById) {\n\t\t\t\t\t// promise the library import is replaced with its contents\n\t\t\t\t\tpromises.push(\n\t\t\t\t\t\tPromise.all(\n\t\t\t\t\t\t\tresolvedFilenamesById[cssId].filter(\n\t\t\t\t\t\t\t\t// ignore filenames that have already been inserted\n\t\t\t\t\t\t\t\tfilename => insertedFilenames[filename] = opts.allowDuplicates || !(filename in insertedFilenames)\n\t\t\t\t\t\t\t).map(\n\t\t\t\t\t\t\t\t// parse the file (the file and css are conservatively cached)\n\t\t\t\t\t\t\t\tfilename => parse(filename, commentsTransformer)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t).then(roots => {\n\t\t\t\t\t\t\tif (roots.length) {\n\t\t\t\t\t\t\t\t// combine all the library nodes returned by the parsed files\n\t\t\t\t\t\t\t\tconst nodes = roots.reduce(\n\t\t\t\t\t\t\t\t\t(all, root) => all.concat(root.nodes),\n\t\t\t\t\t\t\t\t\t[]\n\t\t\t\t\t\t\t\t)\n\n\t\t\t\t\t\t\t\t// replace the import with all the library nodes\n\t\t\t\t\t\t\t\tatrule.replaceWith(...nodes)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t)\n\n\treturn Promise.all([].concat(\n\t\t// promise the library imports are replaced with their contents\n\t\tpromises,\n\t\t// promise certain libraries are prepended\n\t\tPromise.all(\n\t\t\t[].concat(\n\t\t\t\topts.forceImport || []\n\t\t\t).reduce(\n\t\t\t\t// filter the id to be a known id or boolean true\n\t\t\t\t(all, id) => {\n\t\t\t\t\tif (id === true) {\n\t\t\t\t\t\tall.push(...resolvedFilenamesById.normalize)\n\t\t\t\t\t} else if (typeof id === 'string') {\n\t\t\t\t\t\tconst cssId = id.replace(cssExtRegExp, '')\n\n\t\t\t\t\t\tif (cssId in resolvedFilenamesById) {\n\t\t\t\t\t\t\tall.push(...resolvedFilenamesById[cssId])\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn all\n\t\t\t\t},\n\t\t\t\t[]\n\t\t\t).filter(\n\t\t\t\t// ignore filenames that have already been inserted\n\t\t\t\tfilename => insertedFilenames[filename] = opts.allowDuplicates || !(filename in insertedFilenames)\n\t\t\t).map(\n\t\t\t\t// parse the file (the file and css are conservatively cached)\n\t\t\t\tfilename => parse(filename, commentsTransformer)\n\t\t\t)\n\t\t).then(roots => {\n\t\t\tif (roots.length) {\n\t\t\t\t// combine all the library nodes returned by the parsed files\n\t\t\t\tconst nodes = roots.reduce(\n\t\t\t\t\t(all, root) => all.concat(root.nodes),\n\t\t\t\t\t[]\n\t\t\t\t)\n\n\t\t\t\t// prepend the stylesheet with all the library nodes\n\t\t\t\troot.prepend(...nodes)\n\t\t\t}\n\t\t})\n\t))\n}\n\nconst cssExtRegExp = /\\.css\\b/g\nconst importRegExp = /^import(?:-(normalize|sanitize))?$/\nconst paramsRegExp = /^\\s*(?:url\\((?:\"(.+)\"|'(.+)')\\)|\"(.+)\"|'(.+)')[\\W\\w]*$/\n\nexport default postcssPlugin\n","import { create } from './lib/util'\nimport postcssBrowserComments from 'postcss-browser-comments'\nimport postcssImportNormalize from './lib/postcssImportNormalize'\nimport postcssNormalize from './lib/postcssNormalize'\n\nconst plugin = opts => {\n\topts = create(opts)\n\n\tconst commentsTransformer = postcssBrowserComments(opts).Once\n\tconst normalizeTransformer = postcssNormalize(commentsTransformer, opts)\n\tconst postcssImportConfig = postcssImportNormalize(commentsTransformer, opts)\n\n\treturn {\n\t\tpostcssPlugin: 'postcss-normalize',\n\t\tOnce(root) {\n\t\t\treturn normalizeTransformer(root)\n\t\t},\n\t\tpostcssImport: postcssImportConfig\n\t}\n}\n\nplugin.postcss = true\n\nexport default plugin\n"],"names":["assign","objects","Object","create","currentURL","import","meta","url","currentFilename","URL","pathname","currentDirname","path","dirname","normalizeCSS","resolve","normalizeOpinionatedCSS","sanitizeCSS","sanitizeFormsCSS","sanitizePageCSS","sanitizeTypographyCSS","parsableFilenames","resolvedFilenamesById","id","Module","_resolveFilename","filename","paths","_nodeModulePaths","cache","readFile","Promise","reject","fs","stat","statsError","mtime","data","readFileError","transformer","then","css","postcss","parse","from","root","clone","commentsTransformer","opts","load","importOptions","toResult","to","map","call","basedir","cssId","replace","cssExtRegExp","postcssPlugin","promises","insertedFilenames","walkAtRules","importRegExp","atrule","name","match","params","paramsRegExp","slice","find","part","push","all","filter","allowDuplicates","roots","length","nodes","reduce","concat","replaceWith","forceImport","normalize","prepend","plugin","postcssBrowserComments","Once","normalizeTransformer","postcssNormalize","postcssImportConfig","postcssImportNormalize","postcssImport"],"mappings":"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"}