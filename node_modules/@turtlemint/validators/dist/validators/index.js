"use strict";
// declare const RegExp: {
// 	new (pattern: any, flags?: string): RegExp;
// 	(pattern: any, flags?: string): RegExp;
// };
Object.defineProperty(exports, "__esModule", { value: true });
var stringToRegex = function (regexString) {
    return /^\/.*\/[gimuy]*$/.test(regexString)
        ? eval(regexString)
        : new RegExp(regexString);
};
//rules
exports.required = function (value) {
    if (value == undefined) {
        return false;
    }
    else if (typeof value === "object" && !Object.keys(value).length) {
        return false;
    }
    else if (typeof value == "string" && value.trim() == "") {
        return false;
    }
    else if (value.constructor === Array && value.length <= 0) {
        return false;
    }
    else {
        return true;
    }
};
exports.email = function (email, ENABLE_OPTIONAL) {
    if (ENABLE_OPTIONAL === void 0) { ENABLE_OPTIONAL = false; }
    if ((typeof email == "string" && email === "") || !email) {
        return ENABLE_OPTIONAL ? true : false;
    }
    var emailRegex = new RegExp(
    /* tslint:disable-next-line */
    /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@([a-z\d]{1,}[a-z+\d_-]*)(([.][a-z]{2,}){1,})$/i);
    return emailRegex.test(email.toString());
};
exports.mobile = function (mobile, ENABLE_OPTIONAL) {
    if (ENABLE_OPTIONAL === void 0) { ENABLE_OPTIONAL = false; }
    if (!mobile) {
        return ENABLE_OPTIONAL ? true : false;
    }
    var mobileRegex = new RegExp(/^[6-9][\d]{9}$/);
    return mobileRegex.test(mobile.toString());
};
// check for value with datatype and not just value, so "123" will be false
exports.integer = function (integer, ENABLE_OPTIONAL) {
    if (ENABLE_OPTIONAL === void 0) { ENABLE_OPTIONAL = false; }
    if (!integer) {
        return ENABLE_OPTIONAL ? true : false;
    }
    var IntegerRegex = new RegExp(/^\d+$/g);
    return IntegerRegex.test(integer.toString());
};
exports.regex = function (value, regexString) {
    return stringToRegex(regexString).test(value.toString());
};
// function inverse_regex(regexString: string, value: string|number) {
// 	return !stringToRegex(regexString).test(value.toString())
// };
exports.maxValue = function (value, maxValue) {
    if (isNaN(maxValue) || isNaN(+value))
        return false;
    else if (value > maxValue)
        return false;
    else
        return true;
};
exports.minLength = function (value, minLength) {
    if (isNaN(minLength) || !value.toString())
        return false;
    if (value) {
        return value.toString().trim().length >= minLength;
    }
    else
        return false;
};
exports.maxLength = function (value, maxLength) {
    if (isNaN(maxLength) || !value.toString())
        return false;
    if (value) {
        return value.toString().length <= maxLength;
    }
    return true;
};
exports.minValue = function (value, minValue) {
    if (isNaN(minValue) || isNaN(+value))
        return false;
    else if (value < minValue)
        return false;
    else
        return true;
};
exports.pan = function (value, ENABLE_OPTIONAL) {
    if (ENABLE_OPTIONAL === void 0) { ENABLE_OPTIONAL = false; }
    if (!value) {
        return ENABLE_OPTIONAL ? true : false;
    }
    var regex = /[A-Z]{5}[0-9]{4}[A-Z]{1}/i;
    return regex.test(value);
};
exports.aadhar = function (value, ENABLE_OPTIONAL) {
    if (ENABLE_OPTIONAL === void 0) { ENABLE_OPTIONAL = false; }
    if (!value) {
        return ENABLE_OPTIONAL ? true : false;
    }
    var regex = /^\d{12}$/;
    return regex.test(value.toString());
};
exports.gstin = function (value, ENABLE_OPTIONAL) {
    if (ENABLE_OPTIONAL === void 0) { ENABLE_OPTIONAL = false; }
    if (!value) {
        return ENABLE_OPTIONAL ? true : false;
    }
    var regex = /^[\d]{2}[A-Z]{5}[\d]{4}[A-Z]{1}[A-Z\d]{1}[Zz]{1}[A-Z\d]{1}$/i;
    return regex.test(value);
};
exports.alphaNumeric = function (value, ENABLE_OPTIONAL) {
    if (ENABLE_OPTIONAL === void 0) { ENABLE_OPTIONAL = false; }
    if (!value) {
        return ENABLE_OPTIONAL ? true : false;
    }
    var regex = /^[a-z0-9]+$/i;
    if (!regex.test(value.toString()))
        return false;
    return true;
};
exports.alphaNumericWithSpace = function (value, ENABLE_OPTIONAL) {
    if (ENABLE_OPTIONAL === void 0) { ENABLE_OPTIONAL = false; }
    if (!value) {
        return ENABLE_OPTIONAL ? true : false;
    }
    var regex = /^[a-z0-9\s]+$/i;
    if (!regex.test(value.toString()))
        return false;
    return true;
};
exports.multipleOf = function (value, multiple) {
    if (isNaN(multiple) || isNaN(+value))
        return false;
    return +value % multiple === 0;
};
//# sourceMappingURL=index.js.map