"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var validators = __importStar(require("./index"));
var validationRules = validators; // as ISingleParamFuns & IMultiParamFuns;
function callValidator(validationName, validationObj, value) {
    var isValid = true;
    switch (validationName) {
        case "regex":
            isValid = validationRules[validationName](value, validationObj["expression"], true);
            break;
        case "maxValue":
            isValid = validationRules[validationName](value, validationObj["maxValue"], true);
            break;
        case "minValue":
            isValid = validationRules[validationName](value, validationObj["minValue"], true);
            break;
        case "customHandler":
            var customHandler = validationObj["customHandler"];
            isValid = customHandler(value);
            break;
        case "minLength":
            isValid = validationRules[validationName](value, validationObj["minLength"], true);
            break;
        case "maxLength":
            isValid = validationRules[validationName](value, validationObj["maxLength"], true);
            break;
        case "multipleOf":
            isValid = validationRules[validationName](value, validationObj["multiple"], true);
            break;
        default:
            if (validationRules[validationName]) {
                isValid = validationRules[validationName](value, true);
            }
            break;
    }
    return isValid;
}
var ValidationMessages = {
    required: "Please enter this value",
    email: "Invalid email id",
    mobile: "Invalid mobile no",
    mobileCountryCode: "Please enter valid mobile number",
    integer: "Please enter a valid integer value",
    regex: "Please enter a valid value",
    customHandler: "Please enter a valid value",
    maxValue: "Value exceeds the maximum value allowed.",
    minValue: "Value is less than the minimum value allowed.",
    maxLength: "Character limit exceeded.",
    minLength: "Not enough characters entered.",
    pan: "Expected format AAAAA5555A",
    aadhar: "Expected format 555555555555",
    gstin: "Expected format 22AAAAA0000A1Z5",
    pincode: "Please enter a valid 6 digit PIN code",
    alphaNumeric: "Please enter only alphabets and numbers.",
    alphaNumericWithSpace: "Invalid Characters.",
    multipleOf: "Please enter the value which is multiple of a desired number."
};
exports.validationHandler = function (value, validationArray) {
    var validationObject = { isValid: true, message: "" };
    if (Object.prototype.toString.call(validationArray) !== "[object Array]") {
        throw new Error("validationArray should be an array (In Validations.tsx)");
    }
    else {
        for (var i = 0; i < validationArray.length; i++) {
            if (typeof validationArray[i] == "string") {
                var singleParamValidationRule = validationArray[i];
                validationObject["isValid"] = validationRules[singleParamValidationRule](value, true);
                validationObject["message"] = "";
                if (validationObject["isValid"] == false) {
                    validationObject["message"] =
                        ValidationMessages[singleParamValidationRule];
                }
            }
            else if (typeof validationArray[i] == "object") {
                var multiParamValidationRule = validationArray[i];
                if (Object.prototype.hasOwnProperty.call(multiParamValidationRule, "name")) {
                    validationObject["isValid"] = callValidator(multiParamValidationRule["name"], multiParamValidationRule, value);
                    validationObject["message"] = "";
                    if (validationObject["isValid"] == false) {
                        // checking if custom message is passed if not then use standard msgs
                        if (Object.prototype.hasOwnProperty.call(multiParamValidationRule, "message")) {
                            validationObject["message"] = multiParamValidationRule["message"];
                        }
                        else {
                            validationObject["message"] =
                                ValidationMessages[multiParamValidationRule["name"]];
                        }
                    }
                }
                else {
                    throw new Error("Validation object must have name key");
                }
            }
            else {
                throw new Error("Valdiation rules can only be of type string or object");
            }
            //breaking if any one validation is false
            if (validationObject["isValid"] == false) {
                break;
            }
        }
        return validationObject;
    }
};
exports.default = exports.validationHandler;
//# sourceMappingURL=handler.js.map