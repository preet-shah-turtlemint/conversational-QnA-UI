"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Form = void 0;
var React = __importStar(require("react"));
var form_item_1 = __importDefault(require("./form-item"));
var type_1 = require("../__utils/type");
var row_1 = __importDefault(require("./row"));
var validators_1 = require("@turtlemint/validators");
var custom_hooks_1 = require("../__utils/custom-hooks");
var displayTuple = type_1.tuple("horizontal", "vertical", "inline");
var formWithRef = function (props, ref) {
    var name = props.name, _a = props.layout, layout = _a === void 0 ? "horizontal" : _a, _b = props.onSubmit, onSubmit = _b === void 0 ? function () { } : _b, _c = props.formState, formState = _c === void 0 ? {} : _c, children = props.children;
    var _d = React.useState(formState), state = _d[0], setState = _d[1];
    var _e = React.useState({}), errors = _e[0], setErrors = _e[1];
    var prevFormState = custom_hooks_1.usePrevious(formState);
    React.useEffect(function () {
        // shallow comparision of Objects
        if (Object.entries(formState)
            .sort()
            .toString() !=
            Object.entries(prevFormState)
                .sort()
                .toString()) {
            setState(__assign(__assign({}, state), formState));
        }
    }, [formState]);
    // Called on blur
    var handleError = function (rules, name, value) {
        var errorState = validate(rules, name, value, errors);
        setErrors(__assign({}, errorState));
    };
    // Called on each keystroke
    var handleChange = function (sideEffectCallBack, value, name) {
        var _a;
        // This is a check for handling side effects
        sideEffectCallBack && sideEffectCallBack(value, name);
        setState(__assign(__assign({}, state), (_a = {}, _a[name] = value, _a)));
    };
    var validate = function (rules, name, value, errors) {
        var _a;
        var lcoalErrors = errors || {};
        value = typeof value === "string" ? value.trim() : value || "";
        // Validation handler will take care of all validaitons against a value
        if (rules) {
            var validationState = validators_1.validationHandler(value, rules);
            if (!validationState.isValid) {
                return __assign(__assign({}, lcoalErrors), (_a = {}, _a[name] = validationState.message, _a));
            }
            delete lcoalErrors[name]; // Remove property from ERROR object
        }
        return lcoalErrors;
    };
    var validateAll = function () {
        var localErrors = {};
        React.Children.map(children, function (child) {
            var _a = child.props, name = _a.name, rules = _a.rules;
            localErrors = validate(rules, name, state[name] || "", localErrors);
        });
        return localErrors;
    };
    var isValid = function () {
        var localErrors = validateAll();
        setErrors(localErrors);
        return !Object.keys(localErrors).length;
    };
    var handleSubmit = function (e) {
        e.preventDefault();
        var valid = isValid();
        if (!valid)
            return;
        onSubmit(state, e);
    };
    var isError = function () {
        // throw error only if rule is violated on any of the required fields
        return !!Object.keys(errors).length;
    };
    React.useImperativeHandle(ref, function () { return ({
        validate: function () { return isValid(); },
        getFormState: function () { return state; },
        setFormState: function (state) {
            setState(__assign({}, state));
        },
        resetForm: function (emptyState) {
            setState(emptyState);
        }
    }); });
    return (React.createElement("form", { name: name, onSubmit: handleSubmit }, React.Children.map(children, function (child) {
        // for side-effects
        var sideEffectCallBack = child.props.handleChange;
        if (child.props.submit) {
            var disabled = isError();
            return React.cloneElement(child, {
                disabled: disabled,
                layout: layout
            });
        }
        return React.cloneElement(child, {
            state: state,
            handleChange: handleChange.bind(null, sideEffectCallBack),
            errors: errors,
            handleError: handleError,
            layout: layout
        });
    })));
};
exports.Form = React.forwardRef(formWithRef);
exports.Form.Item = form_item_1.default;
exports.Form.Row = row_1.default;
exports.default = exports.Form;
//# sourceMappingURL=index.js.map