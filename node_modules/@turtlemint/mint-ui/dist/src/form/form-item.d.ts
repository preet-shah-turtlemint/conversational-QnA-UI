import * as React from "react";
import { ChangeHandler } from "../__utils/type";
import { DisplayType } from ".";
import { IValidationArray } from "@turtlemint/validators";
export declare type labelCol = {
    span: number;
};
export interface FormItemProps {
    /** Name of the form control field */
    name?: string;
    /** label of the form control label element */
    label?: string;
    /** helpText to aid understanding of the form field */
    helpText?: string;
    /** validation rules for the form control field */
    rules?: IValidationArray;
    /** state of the form  (Used internally ) */
    state?: any;
    /** common handleChange event for form control field (Used internally )  */
    handleChange?: ChangeHandler<any>;
    /** error state of the form */
    errors?: any;
    /** handleError handler to be called on onBlur of the form controld fields */
    handleError?: (rules: IValidationArray, name: string, value: any) => void;
    /** layout propagated from Form component ( Used internally) */
    layout?: DisplayType;
    /** used to create an inline form label and checkbox type of field when form layout is vertical */
    inline?: boolean;
    /** flex value for label */
    labelCol?: labelCol;
    /** flex value for form control field */
    fieldCol?: labelCol;
    style?: React.CSSProperties;
    children: any;
    bottomSpace?: number;
}
export declare const FormItem: ({ name, label, helpText, rules, state, handleChange, errors, handleError, layout, inline, labelCol, fieldCol, style, children, bottomSpace }: FormItemProps) => JSX.Element;
export declare const Label: import("styled-components").StyledComponent<"label", any, {
    error?: string | undefined;
    layout?: "inline" | "horizontal" | "vertical" | undefined;
    inline?: boolean | undefined;
    labelCol?: labelCol | undefined;
}, never>;
export declare const HelpText: import("styled-components").StyledComponent<"p", any, {
    children: React.ReactNode;
}, never>;
declare const _default: React.MemoExoticComponent<({ name, label, helpText, rules, state, handleChange, errors, handleError, layout, inline, labelCol, fieldCol, style, children, bottomSpace }: FormItemProps) => JSX.Element>;
export default _default;
