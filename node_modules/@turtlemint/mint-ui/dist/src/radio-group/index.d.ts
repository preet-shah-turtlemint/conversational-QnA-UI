import * as React from "react";
import { ChangeHandler, BlurHandler, ITheme } from "../__utils/type";
import { IValidationArray } from "@turtlemint/validators";
declare const Size: ["large", "small", "default"];
declare type ButtonSize = typeof Size[number];
declare const Layout: ["vertical", "default"];
declare type ButtonLayout = typeof Layout[number];
declare const BtnType: ["outline", "solid", "radio"];
declare type ButtonType = typeof BtnType[number];
declare type ValueType = string | number;
interface RadioGroupProps {
    name?: string;
    disabled?: boolean;
    size?: ButtonSize;
    layout?: ButtonLayout;
    value?: ValueType;
    onChange?: ChangeHandler<ValueType>;
    onBlur?: BlurHandler<ValueType>;
    buttonStyle?: ButtonType;
    radios: IRadioOptionProps[];
    validations?: IValidationArray;
    error?: boolean;
    radioOption?: React.FC<IRadioOptionProps>;
    displayKey?: string;
    valueKey?: string;
    style?: React.CSSProperties;
    theme?: ITheme;
    sticky?: boolean;
}
export interface IRadioOptionProps extends IRadioButtonProps {
    [key: string]: any;
}
export declare const RadioGroup: React.ForwardRefExoticComponent<RadioGroupProps & React.RefAttributes<any>>;
export declare const RadioIcon: import("styled-components").StyledComponent<"span", any, {
    isActive?: boolean | undefined;
    size?: "small" | "default" | "large" | undefined;
    theme?: ITheme | undefined;
}, never>;
export interface IRadioButtonProps {
    id?: string;
    text: string;
    value: ValueType;
    activeValue?: ValueType;
    size?: ButtonSize;
    buttonStyle?: ButtonType;
    disabled?: boolean;
    onClick?: (val: ValueType) => void;
    sticky?: boolean;
    theme?: ITheme;
}
declare const _default;
export default _default;
