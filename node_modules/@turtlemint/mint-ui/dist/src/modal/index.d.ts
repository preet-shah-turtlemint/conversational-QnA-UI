import * as React from "react";
import { ButtonProps, ButtonType } from "../button";
export interface ModalProps {
    /** DOM element to render the app to */
    container?: Element;
    /** title of the Modal header to render the app to */
    title?: string | React.ReactNode;
    /** toggle the visibility of the modal */
    visible?: boolean;
    /** customisation for modal width in pixels, percentages, em, rem */
    width?: string | number;
    /** style */
    style?: React.CSSProperties;
    /** styles applied to the body */
    bodyStyle?: Object;
    headerStyle?: React.CSSProperties;
    headerTitleStyle?: React.CSSProperties;
    iconColor?: string;
    /** If the modal is closable or not */
    closable?: boolean;
    closeIcon?: React.ReactNode;
    /** text in cancel Button */
    cancelText?: string;
    /** text in cancelButtonProps Button */
    cancelButtonProps?: ButtonProps;
    /** onCancel callback */
    onCancel?: (event: React.MouseEvent<HTMLElement, MouseEvent>) => void;
    /**  text in ok Button */
    okText?: string;
    /** type of the ok button */
    okType?: ButtonType;
    /** type of the okButtonProps button */
    okButtonProps?: ButtonProps;
    /** callback for OK button click */
    onOk?: (event: React.MouseEvent<HTMLElement, MouseEvent>) => void;
    /** callback for close button */
    onClose?: React.MouseEventHandler<HTMLButtonElement | HTMLAnchorElement>;
    children: React.ReactNode;
    header?: boolean;
    footer?: boolean;
}
export declare const Modal: ({ title, visible, width, style, bodyStyle, headerStyle, headerTitleStyle, iconColor, closable, closeIcon, container, cancelText, cancelButtonProps, onCancel, okText, okType, okButtonProps, onOk, onClose, children, header, footer, ...rest }: ModalProps) => JSX.Element | null;
export interface HeaderProps {
    title: string | React.ReactNode;
    icon?: string;
    iconColor?: string;
    closable?: boolean;
    closeIcon?: React.ReactNode;
    onClose?: React.MouseEventHandler<HTMLButtonElement | HTMLAnchorElement>;
    className?: string;
    headerStyle?: React.CSSProperties;
    headerTitleStyle?: React.CSSProperties;
}
export declare const HeaderTitle: import("styled-components").StyledComponent<"div", any, {}, never>;
export declare const Header: ({ title, icon, iconColor, closable, onClose, className, headerStyle, headerTitleStyle }: HeaderProps) => JSX.Element;
export interface BodyProps {
    padding?: string;
}
export declare const Body: import("styled-components").StyledComponent<"div", any, BodyProps, never>;
export declare const Footer: import("styled-components").StyledComponent<"div", any, {
    isConfirm?: boolean | undefined;
}, never>;
declare const _default: React.MemoExoticComponent<({ title, visible, width, style, bodyStyle, headerStyle, headerTitleStyle, iconColor, closable, closeIcon, container, cancelText, cancelButtonProps, onCancel, okText, okType, okButtonProps, onOk, onClose, children, header, footer, ...rest }: ModalProps) => JSX.Element | null>;
export default _default;
