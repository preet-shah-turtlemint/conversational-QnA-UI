import * as React from "react";
import { ITheme } from "../__utils/type";
interface DropdownProps {
    options: SelectedOption[];
    onSelect: (option: SelectedOption) => void;
    style?: React.CSSProperties;
    loading: boolean;
    displayKey?: string;
    valueKey?: string;
    codeKey?: string;
    groups?: any;
    openInModal?: boolean;
    OptionJSX?: React.FC<OptionProps>;
    selectedValue?: any;
    listStyle?: React.CSSProperties;
    theme?: ITheme;
}
export declare const Dropdown: ({ onSelect, options, style, loading, displayKey, valueKey, codeKey, groups, openInModal, OptionJSX, selectedValue, listStyle, theme }: DropdownProps) => JSX.Element;
export interface OptionProps {
    disabled?: boolean;
    value?: string | number;
    title?: string;
    children?: React.ReactNode;
    className?: string;
    style?: React.CSSProperties;
    handleSelect?: (event: any) => void;
    type?: "default" | "label";
    selectedValue?: any;
    theme?: ITheme;
}
export interface SelectedOption {
    [key: string]: any;
}
export declare const Option: ({ value, disabled, children, handleSelect, type, theme }: OptionProps) => JSX.Element;
export declare const DropdownWrapper: import("styled-components").StyledComponent<"div", any, {
    openInModal: boolean;
    theme?: ITheme | undefined;
}, never>;
export declare const List: import("styled-components").StyledComponent<"ul", any, {
    openInModal: boolean;
    theme?: ITheme | undefined;
}, never>;
export declare const StyledOption: import("styled-components").StyledComponent<"li", any, {
    disabled: boolean;
    type: string;
    theme?: ITheme | undefined;
}, never>;
declare const _default;
export default _default;
